<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--配置规则类的位置-->
<!--    <conversionRule  conversionWord="ip"-->
<!--                    converterClass="com/jsy/utils/IPConverterConfig" />-->
    <!-- 定义日志文件 输入位置 -->
    <property name="log_dir" value="../logs/order-service" />


<!--    <define name="localIP" class="cn.jboost.common.IPLogDefiner"/>-->
    <!-- 日志最大的历史 文件数量-1 -->
    <!--    <property name="maxHistory" value="2" />-->
    <!-- 格式化输出：%d表示日期，
                    %thread表示线程名，
                    %-5level：级别从左显示5个字符宽度
                    %msg：日志消息（%m）
                    %n是换行符
                    %file文件名
                    %M为方法
                    %c类全路径名
                    %L行号
                    %yellow()显示的颜色-->
    <property name="CONSOLE_LOG_PATTERN"
              value="%yellow(%-5level)|%yellow(%d{MM-dd HH:mm:ss})| %yellow(%thread)| %highlight(%file:%L)| %highlight(%M) |%highlight(%logger) %cyan(***MESSAGE***) %cyan(%msg %n)"/>
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n"/>

    <property name="HTML_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %L %-5level %thread %c %M %logger  %msg "/>


    <!-- 控制台输出 -->
    <appender name="SYSTEM_STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <springProfile name="dev"><!--指定环境-->
            <charset>UTF-8</charset>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
<!--                <pattern>%ips</pattern>-->
            </springProfile>
        </encoder>
    </appender>

<!--    &lt;!&ndash; 日志文件输出HTML &ndash;&gt;-->
<!--    <appender name="SYSTEM_HTML" class="ch.qos.logback.core.FileAppender">-->
<!--        <file> ${log_dir}/orderLog.html</file>-->
<!--        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">-->
<!--            <layout class="ch.qos.logback.classic.html.HTMLLayout">-->
<!--                <pattern>${HTML_LOG_PATTERN}</pattern>-->
<!--            </layout>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->


<!--    &lt;!&ndash; 日志文件输出 &ndash;&gt;
    <appender name="SYSTEM_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash;日志文件保存路径&ndash;&gt;
        <file> ${log_dir}/roll_order.log</file>
        &lt;!&ndash;指定拆分规则&ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
           &lt;!&ndash;按照时间和压缩格式拆分声明文件名&ndash;&gt;
            <fileNamePattern>
                ${log_dir}/%d{yyyy-MM-dd}-%i.log.gz
            </fileNamePattern>
            &lt;!&ndash;按照文件大小拆分&ndash;&gt;
                <maxFileSize>1MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        &lt;!&ndash;日志级别过滤器&ndash;&gt;
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash;过滤规则&ndash;&gt;
            <level>INFO</level>&lt;!&ndash;设置过滤日志的等级&ndash;&gt;
            <onMatch>ACCEPT</onMatch>&lt;!&ndash;超过上面的日志级别注入日志中&ndash;&gt;
            <onMismatch>DENY</onMismatch>&lt;!&ndash;未超过上面的日志级别进行拦截&ndash;&gt;
        </filter>
    </appender>

&lt;!&ndash;异步日志&ndash;&gt;
    <appender class="ch.qos.logback.classic.AsyncAppender">
        &lt;!&ndash;指定某个具体的日志&ndash;&gt;
        <appender-ref ref="SYSTEM_FILE"/>
    </appender>-->





  <!--  &lt;!&ndash; 日志文件输出 -->
    <appender name="SYSTEM_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>
                ${log_dir}/%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <!--            <maxHistory>${maxHistory}</maxHistory>-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>-->





    <!-- 添加监听位置 -->
<!--    <logger name="com.jsy.mapper" level="DEBUG" />-->
<!--    <logger name="com.jsy.controller" level="DEBUG" />-->

    <!-- root logger 配置 -->
    <root level="info">
        <!-- 文件输出 -->
        <appender-ref ref="SYSTEM_FILE" />
        <appender-ref ref="SYSTEM_STDOUT" />
<!--        <appender-ref ref="SYSTEM_HTML"/>-->
    </root>

<!--    &lt;!&ndash;自定义logger对象  additivity表示自定义logger是否集成rootLogger&ndash;&gt;-->
<!--    <logger name="com.jsy" level="info" additivity="false">-->
<!--        <appender-ref ref="SYSTEM_STDOUT" />-->
<!--    </logger>-->


</configuration>